

from hmcpng import load_pixels
from hmcpng import save_pixels
from hmcpng import compare_images

def create_green_image(height, width):
    """ creates and returns a 2-D list of pixels with height rows and
        width columns in which all of the pixels are colored green.
        inputs: height and width are non-negative integers
    """
    pixels = []

    for r in range(height):
        row = [[0, 255, 0]] * width
        pixels += [row]

    return pixels

def brightness(pixel):
    """ takes a pixel (an [R, G, B] list) and returns a value
        between 0 and 255 that represents the brightness of that pixel.
    """
    red = pixel[0] 
    green = pixel[1] 
    blue = pixel[2] 
    return (21*red + 72*green + 7*blue) // 100 

## put your functions below
def grayscale(pixels):
    '''takes the 2-D list pixels containing pixels for an image, and that 
    creates and returns a new 2-D list of pixels for an image that is a 
    grayscale version of the original image'''
    
    height = len(pixels)
    width = len(pixels[0]) 
    new_pixels = create_green_image(height, width) 
    
    for r in range(height):
        for c in range(width):
            gray = brightness(pixels[r][c]) 
            new_pixels[r][c] = [gray, gray, gray] 
    return new_pixels 

def left_right(pixels): 
    '''takes the 2-D list pixels containing pixels for an image, and that 
    creates and returns a new 2-D list of pixels for an image in which the 
    original image is “flipped” left to right''' 
    
    height = len(pixels) 
    width = len(pixels[0]) 
    new_pixels = create_green_image(height, width) 
    for r in range(height):
        for c in range(width):
            new_pixels[r][c] = pixels[r][width-1-c]
    return new_pixels 

def reflect(pixels): 
    '''takes the 2-D list pixels containing pixels for an image, and that 
    creates and returns a new 2-D list of pixels for an image in which the 
    bottom half of original image is replaced by a “reflection” of the top half'''
    
    height = len(pixels) 
    width = len(pixels[0]) 
    new_pixels = create_green_image(height, width) 
    
    for r in range(height): 
        for c in range(width): 
            if r < height//2: 
                new_pixels[r][c] = pixels[r][c] 
            else: 
                new_pixels[r][c] = pixels[height-1-r][c] 
    return new_pixels 

def cut(pixels, rmin, rmax, cmin, cmax):
    ''' takes the 2-D list pixels containing pixels for an image, and 
    creates and returns a new 2-D list that represents the portion of the 
    original image that is specified by the other four parameters.'''
    
    height_diff = rmax - rmin 
    width_diff = cmax - cmin
   
    new_pixels = create_green_image(height_diff, width_diff) 
    
    for r in range(height_diff):
        for c in range(width_diff):
            new_pixels[r][c] = pixels[r + rmin][c +cmin] 
    return new_pixels 



    


            
    
    


            
            
