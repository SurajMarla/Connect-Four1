
# AI Player for use in Connect Four 

import random  
from ps9pr3 import * 

class AIPlayer(Player):
    def __init__(self, checker, tiebreak, lookahead):
        '''constructor for an AI player that contains a checker, tiebreak, and a lookahead'''
        assert(checker == 'X' or checker == 'O')
        assert(tiebreak == 'LEFT' or tiebreak == 'RIGHT' or tiebreak == 'RANDOM')
        assert(lookahead >= 0) 
        super().__init__(checker) 
        self.tiebreak = tiebreak 
        self.lookahead = lookahead 
        
    def __repr__(self):
        ''' Returns a string that represents an AIPlayer object.'''
        return 'Player ' + self.checker + ' (' + self.tiebreak + ', ' + str(self.lookahead) + ')'
    
    def max_score_column(self, scores): 
        '''takes a list scores containing a score for each column of the board, 
        and that returns the index of the column with the maximum score, 
        using the tiebreaking strategies if needed'''
        max_score  = max(scores) 
        list1 = []
        for x in range(len(scores)):
            if scores[x] == max_score:
                list1 += [x] 
        if self.tiebreak == 'LEFT':
            return list1[0]
        if self.tiebreak == 'RIGHT': 
            return list1[-1] 
        if self.tiebreak == 'RANDOM':
            return random.choice(list1) 
        
    def scores_for(self, b): 
        '''takes a Board object b and determines the called AIPlayer‘s scores 
        for the columns in b.''' 
        scores = [50] * b.width
        for col in range(b.width):
            if b.can_add_to(col) == False: 
                scores[col] = -1 
            elif b.is_win_for(self.checker): 
                scores[col] = 100 
            elif b.is_win_for(self.opponent_checker()): 
                scores[col] = 0 
            elif self.lookahead == 0: 
                scores[col] = 50 
            else:
                b.add_checker(self.checker, col)
                opponent = AIPlayer(self.opponent_checker(), self.tiebreak, self.lookahead - 1)
                opp_scores = opponent.scores_for(b) 
                if max(opp_scores) == 0:
                    scores[col] = 100 
                elif max(opp_scores) == 100: 
                    scores[col] = 0 
                else:
                    scores[col] = 50 
                b.remove_checker(col) 
        return scores 
    
    def next_move(self, b):
        '''overrides the next_move method that is inherited from 
        Player. Rather than asking the user for the next move, this function 
        will return the called AIPlayer‘s judgment of its best possible move''' 
        self.num_moves += 1
        scores = self.scores_for(b)
        return self.max_score_column(scores) 
                
                
                
                
                
                
